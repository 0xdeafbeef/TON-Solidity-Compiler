.globl	insert_pubkey
.type	insert_pubkey, @function
CALL $insert_pubkey_macro$

.macro insert_pubkey_macro
.loc stdlib.sol, 14
OVER
CTOS
.loc stdlib.sol, 15
NEWC
.loc stdlib.sol, 18
OVER
LDI 1
POP S3
PUSHCONT {
	.loc stdlib.sol, 19
	STSLICECONST 1
	.loc stdlib.sol, 20
	OVER
	LDU 32
	POP S3
	.loc stdlib.sol, 21
	SWAP
	STSLICECONST 1
	STU 32
	.loc stdlib.sol, 0
}
PUSHCONT {
	.loc stdlib.sol, 23
	STSLICECONST 0
	.loc stdlib.sol, 0
}
IFELSE
.loc stdlib.sol, 27
OVER
LDI 1
POP S3
PUSHCONT {
	.loc stdlib.sol, 28
	STSLICECONST 1
	.loc stdlib.sol, 29
	OVER
	LDI 1
	LDI 1
	POP S4
	.loc stdlib.sol, 30
	PUSH S2
	SWAP
	PUSH S2
	ROT
	STI 1
	STI 1
	BLKDROP2 2, 1
	.loc stdlib.sol, 0
}
PUSHCONT {
	.loc stdlib.sol, 32
	STSLICECONST 0
	.loc stdlib.sol, 0
}
IFELSE
.loc stdlib.sol, 36
OVER
LDDICT
POP S3
SWAP
STDICT
.loc stdlib.sol, 40
NEWDICT
.loc stdlib.sol, 41
PUSH S2
LDI 1
POP S4
PUSHCONT {
	.loc stdlib.sol, 42
	DROP
	OVER
	LDREFRTOS
	SWAP
	POP S3
	.loc stdlib.sol, 43
	LDDICT
	.loc stdlib.sol, 0
	DROP
}
IF
.loc stdlib.sol, 45
PUSHINT 0
SWAP
PUSH S4
NEWC
STU 256
ROTREV
PUSHINT 64
DICTUSETB
.loc stdlib.sol, 46
NEWC
.loc stdlib.sol, 47
DUP2
STDICT
NIP
.loc stdlib.sol, 48
PUSH S2
STSLICECONST 1
POP S3
.loc stdlib.sol, 49
PUSH S2
STBREF
BLKDROP2 2, 1
.loc stdlib.sol, 53
OVER
LDDICT
POP S3
SWAP
STDICT
.loc stdlib.sol, 55
OVER
SEMPTY
THROWIFNOT 55
.loc stdlib.sol, 57
ENDC
BLKDROP2 3, 1
.loc stdlib.sol, 0

.globl	replay_protection
.type	replay_protection, @function
CALL $replay_protection_macro$

.macro replay_protection_macro
.loc stdlib.sol, 61
GETGLOB 3
OVER
LESS
THROWIFNOT 52
.loc stdlib.sol, 62
DUP
NOW
PUSHINT 1000
MUL
PUSHINT 1800000
ADD
LESS
THROWIFNOT 52
.loc stdlib.sol, 63
SETGLOB 3
.loc stdlib.sol, 0

.globl	__tonToGas
.type	__tonToGas, @function
CALL $__tonToGas_macro$

.macro __tonToGas_macro
.loc stdlib.sol, 67
OVER
PUSHINT 65536
PUSH S2
CALLREF {
	CALL $__gasGasPrice_macro$
}
MULDIV
.loc stdlib.sol, 0
BLKDROP2 2, 1

.globl	__gasToTon
.type	__gasToTon, @function
CALL $__gasToTon_macro$

.macro __gasToTon_macro
.loc stdlib.sol, 71
DUP2
CALLREF {
	CALL $__gasGasPrice_macro$
}
PUSHINT 65536
MULDIVC
.loc stdlib.sol, 0
BLKDROP2 2, 1

.globl	__gasGasPrice
.type	__gasGasPrice, @function
CALL $__gasGasPrice_macro$

.macro __gasGasPrice_macro
.loc stdlib.sol, 74
PUSHINT 0
.loc stdlib.sol, 75
OVER
EQINT 0
DUP
PUSHCONT {
	DROP
	OVER
	EQINT -1
}
IFNOT
THROWIFNOT 67
.loc stdlib.sol, 76
OVER
PUSHCONT {
	PUSHINT 20
}
PUSHCONT {
	PUSHINT 21
}
IFELSE
CONFIGPARAM
NULLSWAPIFNOT
.loc stdlib.sol, 77
DUP
THROWIFNOT 68
.loc stdlib.sol, 78
OVER
CTOS
.loc stdlib.sol, 79
DUP
LDU 8
LDU 64
LDU 64
LDU 8
LDU 64
POP S6
REVERSE 5, 0
BLKDROP 4
BLKDROP2 5, 1
.loc stdlib.sol, 0

.globl	__exp
.type	__exp, @function
CALL $__exp_macro$

.macro __exp_macro
.loc stdlib.sol, 83
PUSHINT 1
.loc stdlib.sol, 84
PUSHCONT {
	OVER
	NEQINT 0
}
PUSHCONT {
	.loc stdlib.sol, 85
	OVER
	MODPOW2 1
	PUSHCONT {
		.loc stdlib.sol, 86
		PUSH S2
		MUL
		.loc stdlib.sol, 87
		OVER
		DEC
		POP S2
		.loc stdlib.sol, 0
	}
	PUSHCONT {
		.loc stdlib.sol, 89
		PUSH2 S2, S2
		MUL
		POP S3
		.loc stdlib.sol, 90
		OVER
		RSHIFT 1
		POP S2
		.loc stdlib.sol, 0
	}
	IFELSE
	.loc stdlib.sol, 0
}
WHILE
.loc stdlib.sol, 0
BLKDROP2 2, 1

.globl	parseInteger
.type	parseInteger, @function
CALL $parseInteger_macro$

.macro parseInteger_macro
.loc stdlib.sol, 99
TUPLE 0
PUSHCONT {
	.loc stdlib.sol, 100
	PUSH S2
	PUSHCONT {
		.loc stdlib.sol, 101
		PUSHINT 0
		TPUSH
		.loc stdlib.sol, 0
	}
	IFNOTJMP
	.loc stdlib.sol, 104
	PUSHINT 0
	.loc stdlib.sol, 105
	PUSHCONT {
		PUSH S3
		NEQINT 0
	}
	PUSHCONT {
		.loc stdlib.sol, 106
		OVER2
		DIVMOD
		POP S2
		POP S4
		.loc stdlib.sol, 107
		DUP2
		TPUSH
		POP S2
		.loc stdlib.sol, 0
	}
	WHILE
	DROP
	.loc stdlib.sol, 99
}
CALLX
.loc stdlib.sol, 0
BLKDROP2 2, 1

.globl	convertIntToDecStr_short
.type	convertIntToDecStr_short, @function
CALL $convertIntToDecStr_short_macro$

.macro convertIntToDecStr_short_macro
.loc stdlib.sol, 112
BLKPUSH 3, 2
ABS
PUSHINT 0
FALSE
PUSH S5
LESSINT 0
CALLREF {
	CALL $convertIntToDecStr_macro$
}
.loc stdlib.sol, 0
BLKDROP2 3, 2

.globl	convertIntToDecStr
.type	convertIntToDecStr, @function
CALL $convertIntToDecStr_macro$

.macro convertIntToDecStr_macro
.loc stdlib.sol, 116
PUSH S4
BREMBITS
RSHIFT 3
.loc stdlib.sol, 117
DUP
PUSHCONT {
	.loc stdlib.sol, 118
	BLKPUSH 2, 6
	TPUSH
	POP S7
	.loc stdlib.sol, 119
	DROP
	NEWC
	POP S5
	.loc stdlib.sol, 120
	PUSHINT 127
	.loc stdlib.sol, 0
}
IFNOT
.loc stdlib.sol, 122
PUSH S2
PUSHCONT {
	PUSHINT 48
}
PUSHCONT {
	PUSHINT 32
}
IFELSE
.loc stdlib.sol, 123
PUSH S2
PUSHCONT {
	.loc stdlib.sol, 124
	PUSH S6
	STSLICECONST x2d
	POP S7
	.loc stdlib.sol, 0
}
IF
.loc stdlib.sol, 125
OVER
DEC
POP S2
.loc stdlib.sol, 126
OVER
PUSHCONT {
	.loc stdlib.sol, 127
	BLKPUSH 2, 7
	TPUSH
	POP S8
	.loc stdlib.sol, 128
	NEWC
	POP S7
	.loc stdlib.sol, 129
	PUSHINT 127
	POP S2
	.loc stdlib.sol, 0
}
IFNOT
.loc stdlib.sol, 131
PUSH S5
PUSHINT 10
CALLREF {
	CALL $parseInteger_macro$
}
.loc stdlib.sol, 132
DUP
TLEN
.loc stdlib.sol, 133
PUSH S6
PUSHCONT {
	.loc stdlib.sol, 134
	PUSH2 S6, S0
	LESS
	DUP
	PUSHCONT {
		DROP
		PUSH S6
		GTINT 127
	}
	IFNOT
	THROWIF 66
	.loc stdlib.sol, 136
	PUSH2 S6, S0
	SUB
	.loc stdlib.sol, 137
	PUSH2 S0, S4
	LEQ
	PUSHCONT {
		.loc stdlib.sol, 138
		DUP
		PUSHCONT {
			.loc stdlib.sol, 139
			PUSH2 S9, S3
			STUR 8
			POP S10
			.loc stdlib.sol, 0
		}
		REPEAT
		.loc stdlib.sol, 141
		PUSH2 S4, S0
		SUB
		POP S5
		.loc stdlib.sol, 142
		PUSH S4
		PUSHCONT {
			.loc stdlib.sol, 143
			BLKPUSH 2, 10
			TPUSH
			POP S11
			.loc stdlib.sol, 144
			NEWC
			POP S10
			.loc stdlib.sol, 145
			PUSHINT 127
			POP S5
			.loc stdlib.sol, 0
		}
		IFNOT
		.loc stdlib.sol, 0
	}
	PUSHCONT {
		.loc stdlib.sol, 148
		PUSH S4
		PUSHCONT {
			.loc stdlib.sol, 149
			PUSH2 S9, S3
			STUR 8
			POP S10
			.loc stdlib.sol, 0
		}
		REPEAT
		.loc stdlib.sol, 151
		BLKPUSH 2, 10
		TPUSH
		POP S11
		.loc stdlib.sol, 152
		NEWC
		POP S10
		.loc stdlib.sol, 153
		PUSH2 S0, S4
		SUB
		PUSHCONT {
			.loc stdlib.sol, 154
			PUSH2 S9, S3
			STUR 8
			POP S10
			.loc stdlib.sol, 0
		}
		REPEAT
		.loc stdlib.sol, 156
		PUSHINT 127
		OVER
		SUB
		PUSH S5
		ADD
		POP S5
		.loc stdlib.sol, 0
	}
	IFELSE
	DROP
	.loc stdlib.sol, 0
}
IF
.loc stdlib.sol, 159
PUSH2 S0, S3
LEQ
PUSHCONT {
	.loc stdlib.sol, 160
	DUP
	PUSHCONT {
		.loc stdlib.sol, 161
		OVER
		TPOP
		SWAP
		POP S3
		.loc stdlib.sol, 162
		PUSH S9
		PUSHINT 48
		PUSH S2
		ADD
		STUR 8
		POP S10
		.loc stdlib.sol, 0
		DROP
	}
	REPEAT
	.loc stdlib.sol, 0
}
PUSHCONT {
	.loc stdlib.sol, 165
	PUSH S3
	PUSHCONT {
		.loc stdlib.sol, 166
		OVER
		TPOP
		SWAP
		POP S3
		.loc stdlib.sol, 167
		PUSH S9
		PUSHINT 48
		PUSH S2
		ADD
		STUR 8
		POP S10
		.loc stdlib.sol, 0
		DROP
	}
	REPEAT
	.loc stdlib.sol, 169
	BLKPUSH 2, 9
	TPUSH
	POP S10
	.loc stdlib.sol, 170
	NEWC
	POP S9
	.loc stdlib.sol, 171
	PUSH2 S0, S3
	SUB
	PUSHCONT {
		.loc stdlib.sol, 172
		OVER
		TPOP
		SWAP
		POP S3
		.loc stdlib.sol, 173
		PUSH S9
		PUSHINT 48
		PUSH S2
		ADD
		STUR 8
		POP S10
		.loc stdlib.sol, 0
		DROP
	}
	REPEAT
	.loc stdlib.sol, 0
}
IFELSE
.loc stdlib.sol, 177
BLKDROP 8
.loc stdlib.sol, 0

.globl	convertAddressToHexString
.type	convertAddressToHexString, @function
CALL $convertAddressToHexString_macro$

.macro convertAddressToHexString_macro
.loc stdlib.sol, 181
DUP
REWRITESTDADDR
.loc stdlib.sol, 182
BLKPUSH 2, 4
PUSH S3
CALLREF {
	CALL $convertIntToHexStr_short_macro$
}
POP S5
POP S5
.loc stdlib.sol, 183
PUSH S3
BREMBITS
.loc stdlib.sol, 184
DUP
GTINT 8
PUSHCONT {
	.loc stdlib.sol, 185
	PUSH S4
	STSLICECONST x3a
	POP S5
	.loc stdlib.sol, 0
}
PUSHCONT {
	.loc stdlib.sol, 187
	BLKPUSH 2, 5
	TPUSH
	POP S6
	.loc stdlib.sol, 188
	NEWC
	POP S5
	.loc stdlib.sol, 189
	PUSH S4
	STSLICECONST x3a
	POP S5
	.loc stdlib.sol, 0
}
IFELSE
.loc stdlib.sol, 191
BLKPUSH 2, 5
PUSH S3
PUSHINT 64
TRUE
TRUE
FALSE
CALLREF {
	CALL $convertIntToHexStr_macro$
}
BLKDROP2 6, 2
.loc stdlib.sol, 0

.globl	convertFixedPointToString
.type	convertFixedPointToString, @function
CALL $convertFixedPointToString_macro$

.macro convertFixedPointToString_macro
.loc stdlib.sol, 195
OVER
ABS
.loc stdlib.sol, 196
DUP
PUSHINT 10
PUSH S3
DUP2
OR
THROWIFNOT 69
CALLREF {
	CALL $__exp_macro$
}
DIVMOD
.loc stdlib.sol, 197
BLKPUSH 2, 6
PUSH S3
PUSHINT 0
FALSE
PUSH S9
SGN
LESSINT 0
CALLREF {
	CALL $convertIntToDecStr_macro$
}
POP S7
POP S7
.loc stdlib.sol, 198
PUSH S5
BREMBITS
.loc stdlib.sol, 199
DUP
GTINT 8
PUSHCONT {
	.loc stdlib.sol, 200
	PUSH S6
	STSLICECONST x2e
	POP S7
	.loc stdlib.sol, 0
}
PUSHCONT {
	.loc stdlib.sol, 202
	BLKPUSH 2, 7
	TPUSH
	POP S8
	.loc stdlib.sol, 203
	NEWC
	POP S7
	.loc stdlib.sol, 204
	PUSH S6
	STSLICECONST x2e
	POP S7
	.loc stdlib.sol, 0
}
IFELSE
.loc stdlib.sol, 206
BLKPUSH 2, 7
PUSH2 S3, S6
TRUE
FALSE
CALLREF {
	CALL $convertIntToDecStr_macro$
}
BLKDROP2 8, 2
.loc stdlib.sol, 0

.globl	convertIntToHexStr_short
.type	convertIntToHexStr_short, @function
CALL $convertIntToHexStr_short_macro$

.macro convertIntToHexStr_short_macro
.loc stdlib.sol, 210
BLKPUSH 3, 2
ABS
PUSHINT 0
FALSE
TRUE
PUSH S6
LESSINT 0
CALLREF {
	CALL $convertIntToHexStr_macro$
}
.loc stdlib.sol, 0
BLKDROP2 3, 2

.globl	convertIntToHexStr
.type	convertIntToHexStr, @function
CALL $convertIntToHexStr_macro$

.macro convertIntToHexStr_macro
.loc stdlib.sol, 214
PUSH S5
BREMBITS
RSHIFT 3
.loc stdlib.sol, 215
DUP
PUSHCONT {
	.loc stdlib.sol, 216
	BLKPUSH 2, 7
	TPUSH
	POP S8
	.loc stdlib.sol, 217
	DROP
	NEWC
	POP S6
	.loc stdlib.sol, 218
	PUSHINT 127
	.loc stdlib.sol, 0
}
IFNOT
.loc stdlib.sol, 220
PUSH S3
PUSHCONT {
	PUSHINT 48
}
PUSHCONT {
	PUSHINT 32
}
IFELSE
.loc stdlib.sol, 221
PUSH S2
PUSHCONT {
	.loc stdlib.sol, 222
	PUSH S7
	STSLICECONST x2d
	POP S8
	.loc stdlib.sol, 0
}
IF
.loc stdlib.sol, 223
OVER
DEC
POP S2
.loc stdlib.sol, 224
OVER
PUSHCONT {
	.loc stdlib.sol, 225
	BLKPUSH 2, 8
	TPUSH
	POP S9
	.loc stdlib.sol, 226
	NEWC
	POP S8
	.loc stdlib.sol, 227
	PUSHINT 127
	POP S2
	.loc stdlib.sol, 0
}
IFNOT
.loc stdlib.sol, 229
PUSH S6
PUSHINT 16
CALLREF {
	CALL $parseInteger_macro$
}
.loc stdlib.sol, 230
DUP
TLEN
.loc stdlib.sol, 232
PUSH S7
PUSHCONT {
	.loc stdlib.sol, 233
	PUSH2 S7, S0
	LESS
	DUP
	PUSHCONT {
		DROP
		PUSH S7
		GTINT 127
	}
	IFNOT
	THROWIF 69
	.loc stdlib.sol, 235
	PUSH2 S7, S0
	SUB
	.loc stdlib.sol, 236
	PUSH2 S0, S4
	LEQ
	PUSHCONT {
		.loc stdlib.sol, 237
		DUP
		PUSHCONT {
			.loc stdlib.sol, 238
			PUSH2 S10, S3
			STUR 8
			POP S11
			.loc stdlib.sol, 0
		}
		REPEAT
		.loc stdlib.sol, 240
		PUSH2 S4, S0
		SUB
		POP S5
		.loc stdlib.sol, 241
		PUSH S4
		PUSHCONT {
			.loc stdlib.sol, 242
			BLKPUSH 2, 11
			TPUSH
			POP S12
			.loc stdlib.sol, 243
			NEWC
			POP S11
			.loc stdlib.sol, 244
			PUSHINT 127
			POP S5
			.loc stdlib.sol, 0
		}
		IFNOT
		.loc stdlib.sol, 0
	}
	PUSHCONT {
		.loc stdlib.sol, 247
		PUSH S4
		PUSHCONT {
			.loc stdlib.sol, 248
			PUSH2 S10, S3
			STUR 8
			POP S11
			.loc stdlib.sol, 0
		}
		REPEAT
		.loc stdlib.sol, 250
		BLKPUSH 2, 11
		TPUSH
		POP S12
		.loc stdlib.sol, 251
		NEWC
		POP S11
		.loc stdlib.sol, 252
		PUSH2 S0, S4
		SUB
		PUSHCONT {
			.loc stdlib.sol, 253
			PUSH2 S10, S3
			STUR 8
			POP S11
			.loc stdlib.sol, 0
		}
		REPEAT
		.loc stdlib.sol, 255
		PUSHINT 127
		OVER
		SUB
		PUSH S5
		ADD
		POP S5
		.loc stdlib.sol, 0
	}
	IFELSE
	DROP
	.loc stdlib.sol, 0
}
IF
.loc stdlib.sol, 258
PUSH2 S0, S3
LEQ
PUSHCONT {
	.loc stdlib.sol, 259
	DUP
	PUSHCONT {
		.loc stdlib.sol, 260
		OVER
		TPOP
		SWAP
		POP S3
		.loc stdlib.sol, 261
		DUP
		LESSINT 10
		PUSHCONT {
			.loc stdlib.sol, 262
			PUSH S10
			PUSHINT 48
			PUSH S2
			ADD
			STUR 8
			POP S11
			.loc stdlib.sol, 0
		}
		PUSHCONT {
			.loc stdlib.sol, 264
			PUSH2 S10, S6
			PUSHCONT {
				PUSHINT 87
			}
			PUSHCONT {
				PUSHINT 55
			}
			IFELSE
			PUSH S2
			ADD
			STUR 8
			POP S11
			.loc stdlib.sol, 0
		}
		IFELSE
		DROP
		.loc stdlib.sol, 0
	}
	REPEAT
	.loc stdlib.sol, 0
}
PUSHCONT {
	.loc stdlib.sol, 267
	PUSH S3
	PUSHCONT {
		.loc stdlib.sol, 268
		OVER
		TPOP
		SWAP
		POP S3
		.loc stdlib.sol, 269
		DUP
		LESSINT 10
		PUSHCONT {
			.loc stdlib.sol, 270
			PUSH S10
			PUSHINT 48
			PUSH S2
			ADD
			STUR 8
			POP S11
			.loc stdlib.sol, 0
		}
		PUSHCONT {
			.loc stdlib.sol, 272
			PUSH2 S10, S6
			PUSHCONT {
				PUSHINT 87
			}
			PUSHCONT {
				PUSHINT 55
			}
			IFELSE
			PUSH S2
			ADD
			STUR 8
			POP S11
			.loc stdlib.sol, 0
		}
		IFELSE
		DROP
		.loc stdlib.sol, 0
	}
	REPEAT
	.loc stdlib.sol, 274
	BLKPUSH 2, 10
	TPUSH
	POP S11
	.loc stdlib.sol, 275
	NEWC
	POP S10
	.loc stdlib.sol, 276
	PUSH2 S0, S3
	SUB
	PUSHCONT {
		.loc stdlib.sol, 277
		OVER
		TPOP
		SWAP
		POP S3
		.loc stdlib.sol, 278
		DUP
		LESSINT 10
		PUSHCONT {
			.loc stdlib.sol, 279
			PUSH S10
			PUSHINT 48
			PUSH S2
			ADD
			STUR 8
			POP S11
			.loc stdlib.sol, 0
		}
		PUSHCONT {
			.loc stdlib.sol, 281
			PUSH2 S10, S6
			PUSHCONT {
				PUSHINT 87
			}
			PUSHCONT {
				PUSHINT 55
			}
			IFELSE
			PUSH S2
			ADD
			STUR 8
			POP S11
			.loc stdlib.sol, 0
		}
		IFELSE
		DROP
		.loc stdlib.sol, 0
	}
	REPEAT
	.loc stdlib.sol, 0
}
IFELSE
.loc stdlib.sol, 284
BLKDROP 9
.loc stdlib.sol, 0

.globl	storeStringInBuilders
.type	storeStringInBuilders, @function
CALL $storeStringInBuilders_macro$

.macro storeStringInBuilders_macro
.loc stdlib.sol, 288
OVER
BREMBITS
ADDCONST -7
.loc stdlib.sol, 289
OVER
SBITREFS
.loc stdlib.sol, 290
DUP
PUSHCONT {
	.loc stdlib.sol, 291
	PUSH S3
	PUSHINT 0
	PUSH S2
	SSKIPFIRST
	POP S4
	.loc stdlib.sol, 0
}
IF
.loc stdlib.sol, 292
PUSH2 S1, S2
LEQ
.loc stdlib.sol, 293
DUP
PUSHCONT {
	.loc stdlib.sol, 294
	PUSH2 S4, S5
	STSLICE
	POP S6
	.loc stdlib.sol, 0
}
PUSHCONT {
	.loc stdlib.sol, 296
	BLKPUSH 2, 4
	LDSLICEX
	POP S6
	.loc stdlib.sol, 297
	PUSH S6
	STSLICE
	POP S6
	.loc stdlib.sol, 298
	BLKPUSH 2, 6
	TPUSH
	POP S7
	.loc stdlib.sol, 299
	NEWC
	POP S6
	.loc stdlib.sol, 300
	PUSH2 S4, S5
	STSLICE
	POP S6
	.loc stdlib.sol, 0
}
IFELSE
.loc stdlib.sol, 302
BLKDROP 5
.loc stdlib.sol, 0

.globl	assembleList
.type	assembleList, @function
CALL $assembleList_macro$

.macro assembleList_macro
.loc stdlib.sol, 306
PUSHCONT {
	OVER
	TLEN
	ISZERO
	NOT
}
PUSHCONT {
	.loc stdlib.sol, 307
	OVER
	TPOP
	SWAP
	POP S3
	.loc stdlib.sol, 308
	STBREF
	.loc stdlib.sol, 0
}
WHILE
.loc stdlib.sol, 311
ENDC
.loc stdlib.sol, 0
NIP

.globl	__stoi
.type	__stoi, @function
CALL $__stoi_macro$

.macro __stoi_macro
.loc stdlib.sol, 314
PUSHINT 0
PUSHINT 0
PUSHCONT {
	.loc stdlib.sol, 315
	PUSH S2
	CTOS
	.loc stdlib.sol, 316
	DUP
	SBITS
	LESSINT 8
	PUSHCONT {
		.loc stdlib.sol, 317
		DROP
		PUSHINT 0
		FALSE
		BLKDROP2 2, 2
		.loc stdlib.sol, 0
	}
	IFJMP
	.loc stdlib.sol, 319
	BLKPUSH 2, 0
	.loc stdlib.sol, 320
	LDU 8
	POP S2
	.loc stdlib.sol, 321
	DUP
	EQINT 45
	.loc stdlib.sol, 322
	PUSHINT 0
	.loc stdlib.sol, 323
	PUSH S3
	SBITS
	.loc stdlib.sol, 324
	PUSH2 S2, S2
	PUSHCONT {
		DROP
		DUP
		GTINT 15
	}
	IF
	PUSHCONT {
		.loc stdlib.sol, 325
		PUSH S4
		LDU 8
		LDU 8
		POP S7
		POP S3
		POP S4
		.loc stdlib.sol, 0
	}
	IF
	.loc stdlib.sol, 327
	PUSH S2
	NOT
	DUP
	PUSHCONT {
		DROP
		DUP
		GTINT 7
	}
	IF
	PUSHCONT {
		.loc stdlib.sol, 328
		PUSH S4
		LDU 8
		POP S6
		POP S2
		.loc stdlib.sol, 0
	}
	IF
	.loc stdlib.sol, 330
	PUSH S3
	EQINT 48
	DUP
	PUSHCONT {
		DROP
		OVER
		EQINT 120
	}
	IF
	.loc stdlib.sol, 332
	PUSH S3
	PUSHCONT {
		.loc stdlib.sol, 333
		PUSH S6
		LDU 8
		POP S8
		DROP
		.loc stdlib.sol, 0
	}
	IF
	.loc stdlib.sol, 334
	DUP
	PUSHCONT {
		.loc stdlib.sol, 335
		PUSH S6
		LDU 8
		LDU 8
		POP S9
		DROP2
		.loc stdlib.sol, 0
	}
	IF
	.loc stdlib.sol, 337
	PUSHINT 0
	.loc stdlib.sol, 338
	TRUE
	.loc stdlib.sol, 340
	PUSH S8
	SBITS
	RSHIFT 3
	.loc stdlib.sol, 342
	PUSH S3
	PUSHCONT {
		.loc stdlib.sol, 343
		DUP
		PUSHCONT {
			.loc stdlib.sol, 344
			PUSH S9
			LDU 8
			POP S11
			.loc stdlib.sol, 345
			PUSH S3
			MULCONST 16
			POP S4
			.loc stdlib.sol, 346
			DUP
			GTINT 47
			DUP
			PUSHCONT {
				DROP
				DUP
				LESSINT 58
			}
			IF
			PUSHCONT {
				.loc stdlib.sol, 347
				DUP
				ADDCONST -48
				PUSH S4
				ADD
				POP S4
				.loc stdlib.sol, 0
			}
			PUSHCONT {
				DUP
				GTINT 64
				DUP
				PUSHCONT {
					DROP
					DUP
					LESSINT 71
				}
				IF
				PUSHCONT {
					.loc stdlib.sol, 349
					DUP
					ADDCONST -55
					PUSH S4
					ADD
					POP S4
					.loc stdlib.sol, 0
				}
				PUSHCONT {
					DUP
					GTINT 96
					DUP
					PUSHCONT {
						DROP
						DUP
						LESSINT 103
					}
					IF
					PUSHCONT {
						.loc stdlib.sol, 351
						DUP
						ADDCONST -87
						PUSH S4
						ADD
						POP S4
						.loc stdlib.sol, 0
					}
					PUSHCONT {
						.loc stdlib.sol, 353
						FALSE
						POP S3
						.loc stdlib.sol, 0
					}
					IFELSE
				}
				IFELSE
			}
			IFELSE
			DROP
			.loc stdlib.sol, 0
		}
		REPEAT
		.loc stdlib.sol, 0
	}
	PUSHCONT {
		.loc stdlib.sol, 357
		DUP
		PUSHCONT {
			.loc stdlib.sol, 358
			PUSH S9
			LDU 8
			POP S11
			.loc stdlib.sol, 359
			DUP
			LESSINT 48
			DUP
			PUSHCONT {
				DROP
				DUP
				GTINT 57
			}
			IFNOT
			PUSHCONT {
				.loc stdlib.sol, 360
				FALSE
				POP S3
				.loc stdlib.sol, 0
			}
			IF
			.loc stdlib.sol, 361
			PUSH S3
			MULCONST 10
			POP S4
			.loc stdlib.sol, 362
			ADDCONST -48
			PUSH S3
			ADD
			POP S3
			.loc stdlib.sol, 0
		}
		REPEAT
		.loc stdlib.sol, 0
	}
	IFELSE
	.loc stdlib.sol, 365
	PUSH S6
	PUSHCONT {
		.loc stdlib.sol, 366
		PUSH S2
		NEGATE
		POP S3
		.loc stdlib.sol, 0
	}
	IF
	.loc stdlib.sol, 367
	BLKPUSH 2, 2
	BLKDROP2 12, 2
	.loc stdlib.sol, 314
}
CALLX
.loc stdlib.sol, 0
BLKDROP2 1, 2

.globl	strToList
.type	strToList, @function
CALL $strToList_macro$

.macro strToList_macro
.loc stdlib.sol, 371
TUPLE 0
.loc stdlib.sol, 372
OVER
CTOS
.loc stdlib.sol, 373
PUSHCONT {
	DUP
	SREFS
	NEQINT 0
}
PUSHCONT {
	.loc stdlib.sol, 374
	DUP
	LDREFRTOS
	SWAP
	POP S2
	.loc stdlib.sol, 375
	SWAP
	NEWC
	.loc stdlib.sol, 376
	STSLICE
	.loc stdlib.sol, 377
	PUSH S2
	SWAP
	TPUSH
	POP S2
	.loc stdlib.sol, 0
}
WHILE
.loc stdlib.sol, 380
NEWC
.loc stdlib.sol, 381
DUP2
STSLICE
NIP
.loc stdlib.sol, 382
PUSH S2
SWAP
BLKDROP2 3, 2
.loc stdlib.sol, 0

.globl	bytes_substr
.type	bytes_substr, @function
CALL $bytes_substr_macro$

.macro bytes_substr_macro
.loc stdlib.sol, 385
PUSHREF {
}
.loc stdlib.sol, 386
PUSH S4
PUSHINT 4294967295
CDATASIZE
.loc stdlib.sol, 387
OVER
RSHIFT 3
POP S2
.loc stdlib.sol, 388
PUSH S4
PUSHCONT {
	.loc stdlib.sol, 389
	OVER
	FITS 256
	POP S6
	.loc stdlib.sol, 0
}
PUSHCONT {
	PUSH S5
	LESSINT 0
	PUSHCONT {
		.loc stdlib.sol, 391
		OVER
		FITS 256
		PUSH S6
		ADD
		POP S6
		.loc stdlib.sol, 0
	}
	IF
	.loc stdlib.sol, 0
}
IFELSE
.loc stdlib.sol, 392
PUSH S5
UFITS 256
PUSH S7
GREATER
THROWIFNOT 70
.loc stdlib.sol, 393
PUSH S5
UFITS 256
PUSH S7
SUB
.loc stdlib.sol, 394
BLKPUSH 2, 8
PUSH S2
PUSHREF {
}
.loc stdlib.sol, 407
PUSH S2
PUSHINT 127
DIVMOD
.loc stdlib.sol, 408
PUSH S5
CTOS
.loc stdlib.sol, 409
PUSH S2
PUSHCONT {
	.loc stdlib.sol, 410
	DUP
	LDREFRTOS
	SWAP
	POP S2
	NIP
	.loc stdlib.sol, 0
}
REPEAT
.loc stdlib.sol, 412
OVER
MULCONST 8
SDSKIPFIRST
.loc stdlib.sol, 413
TUPLE 0
.loc stdlib.sol, 414
NEWC
.loc stdlib.sol, 415
PUSHCONT {
	PUSH S6
	NEQINT 0
}
PUSHCONT {
	.loc stdlib.sol, 416
	PUSH2 S6, S2
	SBITS
	RSHIFT 3
	PUSH S2
	BREMBITS
	RSHIFT 3
	MIN
	MIN
	.loc stdlib.sol, 417
	PUSH3 S1, S3, S0
	LSHIFT 3
	UFITS 16
	LDSLICEX
	POP S6
	SWAP
	STSLICE
	POP S2
	.loc stdlib.sol, 418
	PUSH2 S7, S0
	SUB
	POP S8
	.loc stdlib.sol, 419
	PUSH S7
	PUSHCONT {
		.loc stdlib.sol, 420
		PUSH S3
		SBITS
		PUSHCONT {
			.loc stdlib.sol, 421
			PUSH S3
			LDREFRTOS
			SWAP
			POP S5
			POP S4
			.loc stdlib.sol, 0
		}
		IFNOT
		.loc stdlib.sol, 423
		OVER
		BREMBITS
		LESSINT 8
		PUSHCONT {
			.loc stdlib.sol, 424
			BLKPUSH 2, 2
			TPUSH
			POP S3
			.loc stdlib.sol, 425
			NEWC
			POP S2
			.loc stdlib.sol, 0
		}
		IF
		.loc stdlib.sol, 0
	}
	IF
	.loc stdlib.sol, 0
	DROP
}
WHILE
.loc stdlib.sol, 429
DUP2
CALLREF {
	CALL $assembleList_macro$
}
BLKDROP2 14, 1
.loc stdlib.sol, 0
BLKDROP2 4, 1

.globl	__substr
.type	__substr, @function
CALL $__substr_macro$

.macro __substr_macro
.loc stdlib.sol, 397
PUSHREF {
}
.loc stdlib.sol, 398
PUSH S3
PUSHINT 4294967295
CDATASIZE
.loc stdlib.sol, 399
OVER
RSHIFT 3
POP S2
.loc stdlib.sol, 400
PUSH S4
EQINT -1
PUSHCONT {
	.loc stdlib.sol, 401
	PUSH2 S1, S5
	SUB
	FITS 256
	POP S5
	.loc stdlib.sol, 0
}
IF
.loc stdlib.sol, 402
OVER
FITS 256
PUSH S6
FITS 256
PUSH S6
ADD
GEQ
THROWIFNOT 70
.loc stdlib.sol, 403
BLKPUSH 3, 6
UFITS 256
PUSHREF {
}
.loc stdlib.sol, 407
PUSH S2
PUSHINT 127
DIVMOD
.loc stdlib.sol, 408
PUSH S5
CTOS
.loc stdlib.sol, 409
PUSH S2
PUSHCONT {
	.loc stdlib.sol, 410
	DUP
	LDREFRTOS
	SWAP
	POP S2
	NIP
	.loc stdlib.sol, 0
}
REPEAT
.loc stdlib.sol, 412
OVER
MULCONST 8
SDSKIPFIRST
.loc stdlib.sol, 413
TUPLE 0
.loc stdlib.sol, 414
NEWC
.loc stdlib.sol, 415
PUSHCONT {
	PUSH S6
	NEQINT 0
}
PUSHCONT {
	.loc stdlib.sol, 416
	PUSH2 S6, S2
	SBITS
	RSHIFT 3
	PUSH S2
	BREMBITS
	RSHIFT 3
	MIN
	MIN
	.loc stdlib.sol, 417
	PUSH3 S1, S3, S0
	LSHIFT 3
	UFITS 16
	LDSLICEX
	POP S6
	SWAP
	STSLICE
	POP S2
	.loc stdlib.sol, 418
	PUSH2 S7, S0
	SUB
	POP S8
	.loc stdlib.sol, 419
	PUSH S7
	PUSHCONT {
		.loc stdlib.sol, 420
		PUSH S3
		SBITS
		PUSHCONT {
			.loc stdlib.sol, 421
			PUSH S3
			LDREFRTOS
			SWAP
			POP S5
			POP S4
			.loc stdlib.sol, 0
		}
		IFNOT
		.loc stdlib.sol, 423
		OVER
		BREMBITS
		LESSINT 8
		PUSHCONT {
			.loc stdlib.sol, 424
			BLKPUSH 2, 2
			TPUSH
			POP S3
			.loc stdlib.sol, 425
			NEWC
			POP S2
			.loc stdlib.sol, 0
		}
		IF
		.loc stdlib.sol, 0
	}
	IF
	.loc stdlib.sol, 0
	DROP
}
WHILE
.loc stdlib.sol, 429
DUP2
CALLREF {
	CALL $assembleList_macro$
}
BLKDROP2 13, 1
.loc stdlib.sol, 0
BLKDROP2 3, 1

.globl	compareLongStrings
.type	compareLongStrings, @function
CALL $compareLongStrings_macro$

.macro compareLongStrings_macro
.loc stdlib.sol, 432
PUSHINT 0
PUSHCONT {
	.loc stdlib.sol, 436
	PUSH S2
	CTOS
	.loc stdlib.sol, 437
	PUSH S2
	CTOS
	.loc stdlib.sol, 438
	FALSE ; decl return flag
	PUSHCONT {
		DUP
		LESSINT 2
		DUP
		PUSHCONT {
			DROP
			TRUE
		}
		IF
	}
	PUSHCONT {
		.loc stdlib.sol, 439
		BLKPUSH 2, 2
		SDLEXCMP
		.loc stdlib.sol, 440
		DUP
		PUSHCONT {
			.loc stdlib.sol, 441
			BLKDROP2 4, 1
			PUSHINT 4
			.loc stdlib.sol, 0
		}
		IFJMP
		.loc stdlib.sol, 443
		PUSH S3
		SREFS
		.loc stdlib.sol, 444
		PUSH S3
		SREFS
		.loc stdlib.sol, 445
		DUP2
		GREATER
		PUSHCONT {
			BLKDROP 7
			PUSHINT 1
			PUSHINT 4
		}
		IFJMP
		.loc stdlib.sol, 447
		PUSH2 S0, S1
		GREATER
		PUSHCONT {
			BLKDROP 7
			PUSHINT -1
			PUSHINT 4
		}
		IFJMP
		.loc stdlib.sol, 449
		DUP2
		ADD
		PUSHCONT {
			BLKDROP 7
			PUSHINT 0
			PUSHINT 4
		}
		IFNOTJMP
		.loc stdlib.sol, 451
		PUSH S5
		LDREFRTOS
		SWAP
		POP S7
		POP S6
		.loc stdlib.sol, 452
		PUSH S4
		LDREFRTOS
		SWAP
		POP S6
		POP S5
		.loc stdlib.sol, 0
		BLKDROP 3
	}
	WHILE
	EQINT 4
	IFRET
	.loc stdlib.sol, 454
	BLKDROP 3
	PUSHINT 0
	.loc stdlib.sol, 432
}
CALLX
.loc stdlib.sol, 0
BLKDROP2 2, 1

.globl	concatenateStrings
.type	concatenateStrings, @function
CALL $concatenateStrings_macro$

.macro concatenateStrings_macro
.loc stdlib.sol, 458
OVER
CALLREF {
	CALL $strToList_macro$
}
.loc stdlib.sol, 459
PUSH S2
CTOS
.loc stdlib.sol, 460
BLKPUSH 3, 2
CALLREF {
	CALL $storeStringInBuilders_macro$
}
POP S3
POP S3
.loc stdlib.sol, 461
PUSHCONT {
	DUP
	PUSHINT 1
	SCHKREFSQ
}
PUSHCONT {
	.loc stdlib.sol, 462
	DUP
	LDREFRTOS
	SWAP
	POP S2
	NIP
	.loc stdlib.sol, 463
	BLKPUSH 3, 2
	CALLREF {
		CALL $storeStringInBuilders_macro$
	}
	POP S3
	POP S3
	.loc stdlib.sol, 0
}
WHILE
.loc stdlib.sol, 465
BLKPUSH 2, 2
CALLREF {
	CALL $assembleList_macro$
}
BLKDROP2 5, 1
.loc stdlib.sol, 0

