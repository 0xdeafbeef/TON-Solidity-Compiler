	.internal-alias :general_purpose,    1

	.selector
	;s0 - selector
	; s1.. - other data
	SETCP 0
	DUP
    EQINT 1
	DICTPUSHCONST 32
    ROT
	PUSHCONT {
        DICTIGETJMP
	}
	IFNOTJMP
    PUSHREFCONT
	POPCTR c3
	ROT 
    DROP
	DICTIGETJMP

				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				;;; THE CODE BELOW IS GENERATED. DO NOT CHANGE IT!

.macro encode_array_macro
; encode_array_macro
;; param: builder
;; param: array
PRINTSTR encode_array
;; array
;; stack=2
DUP
PUSHINT 32
DICTUMAX
PUSHCONT { POP s1 INC }
PUSHCONT { PUSHINT 0 }
IFELSE
;; decl: len
;; len
;; stack=3
DUP
;; builder
;; stack=4
PUSH s3
STU 32
POP s3
;; array
;; stack=3
PUSH s1
;; builder
;; stack=4
PUSH s3
STDICT
POP s3
;; builder
;; stack=3
PUSH s2
;; return
XCHG s3
BLKDROP 3
; end encode_array_macro

.macro decode_array_macro
; decode_array_macro
;; param: slice
PRINTSTR decode_array
LDU 32
SWAP
;; decl: len
;; slice
;; stack=2
PUSH s1
LDDICT
POP s3
;; decl: array
;; array
;; stack=3
DUP
PUSHINT 32
DICTUMAX
PUSHCONT { POP s1 INC }
PUSHCONT { PUSHINT 0 }
IFELSE
;; decl: len_actual
;; len
;; stack=4
PUSH s2
;; len_actual
;; stack=5
PUSH s1
;; ==
EQUAL
THROWIFNOT 100
PRINTSTR decode_array_ok
;; array
;; stack=4
PUSH s1
;; slice
;; stack=5
PUSH s4
;; return
BLKSWAP 4, 2
BLKDROP 4
; end decode_array_macro

.macro abi_encode_packed_macro
; abi_encode_packed_macro
;; param: builder
;; param: array
;; param: bitSizeOfArrayElement
;; array
;; stack=3
PUSH s1
PUSHINT 32
DICTUMAX
PUSHCONT { POP s1 INC }
PUSHCONT { PUSHINT 0 }
IFELSE
;; decl: arraySize
; for statement
PUSHINT 0
;; decl: idx
PUSHCONT {
	;; idx
	;; stack=5
	DUP
	;; arraySize
	;; stack=6
	PUSH s2
	;; <
	LESS
	NOT DUP IFRET DROP
	;; m_isUntil = 1
	;; bitSizeOfArrayElement
	;; stack=5
	PUSH s2
	;; idx
	;; stack=6
	PUSH s1
	;; array
	;; stack=7
	PUSH s5
	PUSHINT 32
	DICTUGET
	PUSHCONT { 
		NIP
	}
	PUSHCONT {
		NEWC      ; valueBits builder
		PUSHINT 0 ; valueBits builder 0
		XCHG S2   ; 0 builder valueBits
		STUX      ; builder
		ENDC      ; cell
		CTOS      ; default_value
	}
	IFELSE
	;; decl: data_slice
	;; data_slice
	;; stack=6
	DUP
	;; builder
	;; stack=7
	PUSH s6
	STSLICE
	POP s6
	;; drop locals
	DROP
	;; ++
	INC
	FALSE
}
UNTIL
; erase idx
DROP
; for end
;; builder
;; stack=4
PUSH s3
;; return
XCHG s4
BLKDROP 4
; end abi_encode_packed_macro

.macro deploy_contract_macro
; deploy_contract_macro
;; param: my_contract
;; param: remote_addr
;; param: grams_value
;; param: constuctor_id
;; param: encodedParams
PRINTSTR deploy_contract
NEWC
;; decl: msg_builder
;; grams_value
;; stack=6
PUSH s3
;; remote_addr
;; stack=7
PUSH s5
PUSHINT 0
; make__CommonMsgInfoRelaxed__int_msg_info__inline
;; param: value
;; param: remote_addr
;; param: bounce
PRINTSTR buildmsg
NEWC
;; decl: builder
PUSHINT 2
STZEROES
;; bounce
;; stack=4
PUSH s1
STIR 1
PUSHINT 1
STZEROES
MYADDR
STSLICER
;; remote_addr
;; stack=4
PUSH s2
STSLICER
;; value
;; stack=4
PUSH s3
STGRAMS
PUSHINT 1
STZEROES
PUSHINT 0
STGRAMS
PUSHINT 0
STGRAMS
PUSHINT 64
STZEROES
NOW
STUR 32
PRINTSTR buildmsg_end
;; builder
;; stack=4
DUP
;; return
XCHG s4
BLKDROP 4
; end make__CommonMsgInfoRelaxed__int_msg_info__inline
STBR
PUSHINT 1
STONES
;; my_contract
;; stack=6
PUSH s5
;; msg_builder
;; stack=7
PUSH s1
; store_either_for_cell_inline
;; param: x
;; param: builder
PRINTSTR st_either_cell
;; x
;; stack=2
PUSH s1
CTOS
;; decl: slice_x
;; if
;; builder
;; stack=3
PUSH s1
BREMBITS ; tvm_brembits
;; slice_x
;; stack=4
PUSH s1
SBITS ; tvm_sbits
PUSHINT 1
;; +
ADD
;; >
GREATER
PUSHCONT {
	;; builder
	;; stack=3
	PUSH s1
	PUSHINT 1
	STZEROES
	POP s2
	;; slice_x
	;; stack=3
	DUP
	;; builder
	;; stack=4
	PUSH s2
	STSLICE
	POP s2
}
PUSHCONT {
	;; builder
	;; stack=3
	PUSH s1
	PUSHINT 1
	STONES
	POP s2
	;; x
	;; stack=3
	PUSH s2
	;; builder
	;; stack=4
	PUSH s2
	STREF
	POP s2
}
IFELSE
PRINTSTR st_either_cell0
;; builder
;; stack=3
PUSH s1
;; return
XCHG s3
BLKDROP 3
; end store_either_for_cell_inline
;; assign msg_builder
NIP
NEWC
;; decl: body_builder
;; constuctor_id
;; stack=7
PUSH s3
STUR 32
;; encodedParams
;; stack=7
PUSH s2
STBR
;; body_builder
;; stack=7
DUP
;; msg_builder
;; stack=8
PUSH s2
; store_either_for_builder_inline
;; param: x
;; param: builder
PRINTSTR store_either
;; if
;; builder
;; stack=2
DUP
BREMBITS ; tvm_brembits
;; x
;; stack=3
PUSH s2
BBITS
PUSHINT 1
;; +
ADD
;; >
GREATER
PUSHCONT {
	PUSHINT 1
	STZEROES
	;; x
	;; stack=2
	PUSH s1
	STBR
}
PUSHCONT {
	PUSHINT 1
	STONES
	;; x
	;; stack=2
	PUSH s1
	STBREFR
}
IFELSE
PRINTSTR store_either_0
;; builder
;; stack=2
DUP
;; return
NIP
NIP
; end store_either_for_builder_inline
;; assign msg_builder
POP s2
PRINTSTR deploy_contrac0
;; msg_builder
;; stack=7
PUSH s1
ENDC
PUSHINT 0
SENDRAWMSG
BLKDROP 7
; end deploy_contract_macro

.macro deploy_contract2_macro
; deploy_contract2_macro
;; param: my_contract
;; param: remote_addr
;; param: grams
;; param: payload
PRINTSTR deploy_contr2_0
NEWC
;; decl: msg_builder
;; grams
;; stack=5
PUSH s2
;; remote_addr
;; stack=6
PUSH s4
PUSHINT 0
; make__CommonMsgInfoRelaxed__int_msg_info__inline
;; param: value
;; param: remote_addr
;; param: bounce
PRINTSTR buildmsg
NEWC
;; decl: builder
PUSHINT 2
STZEROES
;; bounce
;; stack=4
PUSH s1
STIR 1
PUSHINT 1
STZEROES
MYADDR
STSLICER
;; remote_addr
;; stack=4
PUSH s2
STSLICER
;; value
;; stack=4
PUSH s3
STGRAMS
PUSHINT 1
STZEROES
PUSHINT 0
STGRAMS
PUSHINT 0
STGRAMS
PUSHINT 64
STZEROES
NOW
STUR 32
PRINTSTR buildmsg_end
;; builder
;; stack=4
DUP
;; return
XCHG s4
BLKDROP 4
; end make__CommonMsgInfoRelaxed__int_msg_info__inline
STBR
PUSHINT 1
STONES
;; my_contract
;; stack=5
PUSH s4
;; msg_builder
;; stack=6
PUSH s1
; store_either_for_cell_inline
;; param: x
;; param: builder
PRINTSTR st_either_cell
;; x
;; stack=2
PUSH s1
CTOS
;; decl: slice_x
;; if
;; builder
;; stack=3
PUSH s1
BREMBITS ; tvm_brembits
;; slice_x
;; stack=4
PUSH s1
SBITS ; tvm_sbits
PUSHINT 1
;; +
ADD
;; >
GREATER
PUSHCONT {
	;; builder
	;; stack=3
	PUSH s1
	PUSHINT 1
	STZEROES
	POP s2
	;; slice_x
	;; stack=3
	DUP
	;; builder
	;; stack=4
	PUSH s2
	STSLICE
	POP s2
}
PUSHCONT {
	;; builder
	;; stack=3
	PUSH s1
	PUSHINT 1
	STONES
	POP s2
	;; x
	;; stack=3
	PUSH s2
	;; builder
	;; stack=4
	PUSH s2
	STREF
	POP s2
}
IFELSE
PRINTSTR st_either_cell0
;; builder
;; stack=3
PUSH s1
;; return
XCHG s3
BLKDROP 3
; end store_either_for_cell_inline
;; assign msg_builder
NIP
;; payload
;; stack=5
PUSH s1
;; msg_builder
;; stack=6
PUSH s1
; store_either_for_cell_inline
;; param: x
;; param: builder
PRINTSTR st_either_cell
;; x
;; stack=2
PUSH s1
CTOS
;; decl: slice_x
;; if
;; builder
;; stack=3
PUSH s1
BREMBITS ; tvm_brembits
;; slice_x
;; stack=4
PUSH s1
SBITS ; tvm_sbits
PUSHINT 1
;; +
ADD
;; >
GREATER
PUSHCONT {
	;; builder
	;; stack=3
	PUSH s1
	PUSHINT 1
	STZEROES
	POP s2
	;; slice_x
	;; stack=3
	DUP
	;; builder
	;; stack=4
	PUSH s2
	STSLICE
	POP s2
}
PUSHCONT {
	;; builder
	;; stack=3
	PUSH s1
	PUSHINT 1
	STONES
	POP s2
	;; x
	;; stack=3
	PUSH s2
	;; builder
	;; stack=4
	PUSH s2
	STREF
	POP s2
}
IFELSE
PRINTSTR st_either_cell0
;; builder
;; stack=3
PUSH s1
;; return
XCHG s3
BLKDROP 3
; end store_either_for_cell_inline
;; assign msg_builder
NIP
PRINTSTR deploy_contr2_1
;; msg_builder
;; stack=5
DUP
ENDC
PUSHINT 0
SENDRAWMSG
BLKDROP 5
; end deploy_contract2_macro

.macro insert_pubkey_macro
; insert_pubkey_macro
;; param: my_contract
;; param: pubkey
PRINTSTR insert_pubkey_0
;; my_contract
;; stack=2
PUSH s1
CTOS
;; decl: slice
NEWC
;; decl: builder
;; if
;; slice
;; stack=4
PUSH s1
LDU 1
POP s3
ISZERO
PUSHCONT {
	PUSHINT 1
	STZEROES
}
PUSHCONT {
	PUSHINT 1
	STONES
	;; slice
	;; stack=4
	PUSH s1
	LDU 32
	POP s3
	STUR 32
}
IFELSE
;; if
;; slice
;; stack=4
PUSH s1
LDU 1
POP s3
ISZERO
PUSHCONT {
	PUSHINT 1
	STZEROES
}
PUSHCONT {
	PUSHINT 1
	STONES
	;; slice
	;; stack=4
	PUSH s1
	LDU 2
	POP s3
	STUR 2
}
IFELSE
;; if
;; slice
;; stack=4
PUSH s1
LDU 1
POP s3
ISZERO
PUSHCONT {
	PUSHINT 1
	STZEROES
}
PUSHCONT {
	PUSHINT 1
	STONES
	;; slice
	;; stack=4
	PUSH s1
	LDREF
	POP s3
	STREFR
}
IFELSE
;; slice
;; stack=4
PUSH s1
LDU 1
POP s3
EQINT 1
THROWIFNOT 100
PUSHINT 1
STONES
NEWC
;; decl: key_builder
;; pubkey
;; stack=5
PUSH s3
STUR 256
;; slice
;; stack=5
PUSH s2
LDREF
POP s4
CTOS
;; decl: data
;; data
;; stack=6
DUP
LDDICT
POP s2
;; decl: dict
;; key_builder
;; stack=7
PUSH s2
PUSHINT 0
;; dict
;; stack=9
PUSH s2
PUSHINT 64
DICTUSETB
NIP
NEWC
;; decl: dict_builder
;; dict
;; stack=8
PUSH s1
SWAP
STDICT
;; dict_builder
;; stack=8
DUP
ENDC
;; builder
;; stack=9
PUSH s5
STREF
POP s5
;; if
;; slice
;; stack=8
PUSH s5
LDU 1
POP s7
ISZERO
PUSHCONT {
	;; builder
	;; stack=8
	PUSH s4
	PUSHINT 1
	STZEROES
	POP s5
}
PUSHCONT {
	;; builder
	;; stack=8
	PUSH s4
	PUSHINT 1
	STONES
	POP s5
	;; slice
	;; stack=8
	PUSH s5
	LDREF
	POP s7
	;; builder
	;; stack=9
	PUSH s5
	STREF
	POP s5
}
IFELSE
PRINTSTR insert_pubkey_9
;; builder
;; stack=8
PUSH s4
ENDC
;; return
XCHG s8
BLKDROP 8
; end insert_pubkey_macro

.macro build_state_init_macro
; build_state_init_macro
;; param: code
;; param: data
PRINTSTR bld_stt_nt_0
NEWC
;; decl: builder
PUSHINT 2
STZEROES
PUSHINT 1
STONES
;; code
;; stack=3
PUSH s2
STREFR
PUSHINT 1
STONES
;; data
;; stack=3
PUSH s1
STREFR
PUSHINT 1
STZEROES
PRINTSTR bld_stt_nt_1
;; builder
;; stack=3
DUP
ENDC
;; return
XCHG s3
BLKDROP 3
; end build_state_init_macro

.macro send_internal_message_macro
; send_internal_message_macro
;; param: grams_value
;; param: remote_addr
;; param: body
PRINTSTR send_int_msg
NEWC
;; decl: msg_builder
;; grams_value
;; stack=4
PUSH s3
;; remote_addr
;; stack=5
PUSH s3
PUSHINT -1
; make__CommonMsgInfoRelaxed__int_msg_info__inline
;; param: value
;; param: remote_addr
;; param: bounce
PRINTSTR buildmsg
NEWC
;; decl: builder
PUSHINT 2
STZEROES
;; bounce
;; stack=4
PUSH s1
STIR 1
PUSHINT 1
STZEROES
MYADDR
STSLICER
;; remote_addr
;; stack=4
PUSH s2
STSLICER
;; value
;; stack=4
PUSH s3
STGRAMS
PUSHINT 1
STZEROES
PUSHINT 0
STGRAMS
PUSHINT 0
STGRAMS
PUSHINT 64
STZEROES
NOW
STUR 32
PRINTSTR buildmsg_end
;; builder
;; stack=4
DUP
;; return
XCHG s4
BLKDROP 4
; end make__CommonMsgInfoRelaxed__int_msg_info__inline
STBR
PUSHINT 0
STUR 1
;; body
;; stack=4
PUSH s1
;; msg_builder
;; stack=5
PUSH s1
; store_either_for_builder_inline
;; param: x
;; param: builder
PRINTSTR store_either
;; if
;; builder
;; stack=2
DUP
BREMBITS ; tvm_brembits
;; x
;; stack=3
PUSH s2
BBITS
PUSHINT 1
;; +
ADD
;; >
GREATER
PUSHCONT {
	PUSHINT 1
	STZEROES
	;; x
	;; stack=2
	PUSH s1
	STBR
}
PUSHCONT {
	PUSHINT 1
	STONES
	;; x
	;; stack=2
	PUSH s1
	STBREFR
}
IFELSE
PRINTSTR store_either_0
;; builder
;; stack=2
DUP
;; return
NIP
NIP
; end store_either_for_builder_inline
;; assign msg_builder
NIP
;; msg_builder
;; stack=4
DUP
ENDC
PUSHINT 0
SENDRAWMSG
BLKDROP 4
; end send_internal_message_macro

.macro make_std_address_with_zero_wid_macro
; make_std_address_with_zero_wid_macro
;; param: _address
PRINTSTR make_addr_std
NEWC
;; decl: builder
PUSHINT 1024
STUR 11
;; _address
;; stack=2
PUSH s1
STUR 256
PRINTSTR make_addr_std0
;; builder
;; stack=2
DUP
ENDC
CTOS
;; return
NIP
NIP
; end make_std_address_with_zero_wid_macro

.macro send_accurate_internal_message_macro
; send_accurate_internal_message_macro
;; param: remote_addr
;; param: grams_value
;; param: bounce
;; param: sendrawmsg_flag
PRINTSTR ac_transfer
NEWC
;; decl: builder
PUSHINT 2
STZEROES
;; bounce
;; stack=5
PUSH s2
STIR 1
PUSHINT 1
STZEROES
MYADDR
STSLICER
;; remote_addr
;; stack=5
PUSH s4
STSLICER
;; grams_value
;; stack=5
PUSH s3
STGRAMS
PUSHINT 1
STZEROES
PUSHINT 0
STGRAMS
PUSHINT 0
STGRAMS
PUSHINT 64
STZEROES
NOW
STUR 32
PUSHINT 2
STZEROES
;; builder
;; stack=5
DUP
ENDC
;; sendrawmsg_flag
;; stack=6
PUSH s2
SENDRAWMSG
PRINTSTR ac_transfer_end
BLKDROP 5
; end send_accurate_internal_message_macro

.globl	store_either_for_builder_inline
.type	store_either_for_builder_inline, @function
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Function: store_either_for_builder_inline
;; param: x
;; param: builder
PRINTSTR store_either
;; if
;; builder
;; stack=2
DUP
BREMBITS ; tvm_brembits
;; x
;; stack=3
PUSH s2
BBITS
PUSHINT 1
;; +
ADD
;; >
GREATER
PUSHCONT {
	PUSHINT 1
	STZEROES
	;; x
	;; stack=2
	PUSH s1
	STBR
}
PUSHCONT {
	PUSHINT 1
	STONES
	;; x
	;; stack=2
	PUSH s1
	STBREFR
}
IFELSE
PRINTSTR store_either_0
;; builder
;; stack=2
DUP
;; return
NIP
NIP
RET

.globl	store_either_for_cell_inline
.type	store_either_for_cell_inline, @function
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Function: store_either_for_cell_inline
;; param: x
;; param: builder
PRINTSTR st_either_cell
;; x
;; stack=2
PUSH s1
CTOS
;; decl: slice_x
;; if
;; builder
;; stack=3
PUSH s1
BREMBITS ; tvm_brembits
;; slice_x
;; stack=4
PUSH s1
SBITS ; tvm_sbits
PUSHINT 1
;; +
ADD
;; >
GREATER
PUSHCONT {
	;; builder
	;; stack=3
	PUSH s1
	PUSHINT 1
	STZEROES
	POP s2
	;; slice_x
	;; stack=3
	DUP
	;; builder
	;; stack=4
	PUSH s2
	STSLICE
	POP s2
}
PUSHCONT {
	;; builder
	;; stack=3
	PUSH s1
	PUSHINT 1
	STONES
	POP s2
	;; x
	;; stack=3
	PUSH s2
	;; builder
	;; stack=4
	PUSH s2
	STREF
	POP s2
}
IFELSE
PRINTSTR st_either_cell0
;; builder
;; stack=3
PUSH s1
;; return
XCHG s3
BLKDROP 3
RET

.globl	make__CommonMsgInfoRelaxed__int_msg_info__inline
.type	make__CommonMsgInfoRelaxed__int_msg_info__inline, @function
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Function: make__CommonMsgInfoRelaxed__int_msg_info__inline
;; param: value
;; param: remote_addr
;; param: bounce
PRINTSTR buildmsg
NEWC
;; decl: builder
PUSHINT 2
STZEROES
;; bounce
;; stack=4
PUSH s1
STIR 1
PUSHINT 1
STZEROES
MYADDR
STSLICER
;; remote_addr
;; stack=4
PUSH s2
STSLICER
;; value
;; stack=4
PUSH s3
STGRAMS
PUSHINT 1
STZEROES
PUSHINT 0
STGRAMS
PUSHINT 0
STGRAMS
PUSHINT 64
STZEROES
NOW
STUR 32
PRINTSTR buildmsg_end
;; builder
;; stack=4
DUP
;; return
XCHG s4
BLKDROP 4
RET

.macro push_persistent_data_from_c4_to_c7_macro
; push_persistent_data_from_c4_to_c7_macro
PRINTSTR c4_to_c7
PUSHCTR c7
;; decl: c7
PUSHROOT
CTOS
PLDDICT
TPUSH
;; c7
;; stack=1
DUP
POPCTR c7
PRINTSTR c4_to_c70
DROP
; end push_persistent_data_from_c4_to_c7_macro

.globl	build_external_outbound_message_inline
.type	build_external_outbound_message_inline, @function
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Function: build_external_outbound_message_inline
;; param: body
;; param: logical_time
;; param: src_address
PRINTSTR build_ext_msg
NEWC
;; decl: builder
PUSHINT 3
STUR 2
;; src_address
;; stack=4
PUSH s1
STSLICER
PUSHINT 2
STZEROES
;; logical_time
;; stack=4
PUSH s2
STUR 64
PUSHINT 33
STZEROES
;; if
;; builder
;; stack=4
DUP
BREMBITS ; tvm_brembits
;; body
;; stack=5
PUSH s4
BBITS
PUSHINT 1
;; +
ADD
;; >
GREATER
PUSHCONT {
	PUSHINT 1
	STZEROES
	;; body
	;; stack=4
	PUSH s3
	STBR
}
PUSHCONT {
	PUSHINT 1
	STONES
	;; body
	;; stack=4
	PUSH s3
	STBREFR
}
IFELSE
;; builder
;; stack=4
DUP
ENDC
;; return
XCHG s4
BLKDROP 4
RET

.macro change_array_length_macro
; change_array_length_macro
;; param: defaultValue
;; param: array
;; param: new_len
PRINTSTR change_arr_len
;; array
;; stack=3
PUSH s1
PUSHINT 32
DICTUMAX
PUSHCONT { POP s1 INC }
PUSHCONT { PUSHINT 0 }
IFELSE
;; decl: len
;; if
;; len
;; stack=4
DUP
;; new_len
;; stack=5
PUSH s2
;; >=
GEQ
PUSHCONT {
	; while statement
	PUSHCONT {
		;; len
		;; stack=4
		DUP
		;; new_len
		;; stack=5
		PUSH s2
		;; >
		GREATER
		NOT DUP IFRET DROP
		;; m_isUntil = 1
		;; --
		DEC
		;; len
		;; stack=4
		DUP
		;; array
		;; stack=5
		PUSH s3
		PUSHINT 32
		DICTUDEL
		DROP
		;; assign array
		POP s3
		FALSE
	}
	UNTIL
	; while end
}
PUSHCONT {
	;; if
	;; !
	;; defaultValue
	;; stack=4
	PUSH s3
	ISNULL
	NOT
	PUSHCONT {
		;; defaultValue
		;; stack=4
		PUSH s3
		;; new_len
		;; stack=5
		PUSH s2
		PUSHINT 1
		;; -
		SUB
		;; array
		;; stack=6
		PUSH s4
		PUSHINT 32
		DICTUSETB
		POP s3
	}
	IF
}
IFELSE
PRINTSTR ch_arr_len_end
;; array
;; stack=4
PUSH s2
;; return
XCHG s4
BLKDROP 4
; end change_array_length_macro

.macro send_external_message_macro
; send_external_message_macro
;; param: body
PRINTSTR send_ext_msg
;; body
;; stack=1
DUP
LTIME
MYADDR
; build_external_outbound_message_inline
;; param: body
;; param: logical_time
;; param: src_address
PRINTSTR build_ext_msg
NEWC
;; decl: builder
PUSHINT 3
STUR 2
;; src_address
;; stack=4
PUSH s1
STSLICER
PUSHINT 2
STZEROES
;; logical_time
;; stack=4
PUSH s2
STUR 64
PUSHINT 33
STZEROES
;; if
;; builder
;; stack=4
DUP
BREMBITS ; tvm_brembits
;; body
;; stack=5
PUSH s4
BBITS
PUSHINT 1
;; +
ADD
;; >
GREATER
PUSHCONT {
	PUSHINT 1
	STZEROES
	;; body
	;; stack=4
	PUSH s3
	STBR
}
PUSHCONT {
	PUSHINT 1
	STONES
	;; body
	;; stack=4
	PUSH s3
	STBREFR
}
IFELSE
;; builder
;; stack=4
DUP
ENDC
;; return
XCHG s4
BLKDROP 4
; end build_external_outbound_message_inline
PUSHINT 0
SENDRAWMSG
DROP
; end send_external_message_macro

.macro make_zero_address_macro
; make_zero_address_macro
PRINTSTR make_z_address
NEWC
;; decl: builder
PUSHINT 1
STONES
PUSHINT 266
STZEROES
PRINTSTR make_z_address0
;; builder
;; stack=1
DUP
ENDC
CTOS
;; return
NIP
; end make_zero_address_macro

.macro make_address_macro
; make_address_macro
;; param: wid
;; param: addr
PRINTSTR make_address
NEWC
;; decl: builder
PUSHINT 4
STUR 3
;; wid
;; stack=3
PUSH s2
STIR 8
;; addr
;; stack=3
PUSH s1
STUR 256
PRINTSTR make_address0
;; builder
;; stack=3
DUP
ENDC
CTOS
;; return
XCHG s3
BLKDROP 3
; end make_address_macro

.macro unpack_address_macro
; unpack_address_macro
;; param: slice
PRINTSTR unpack_address
;; slice
;; stack=1
DUP
PARSEMSGADDR
;; decl: tuple
;; tuple
;; stack=2
DUP
FIRST
EQINT 2
THROWIFNOT 84
PRINTSTR unpack_address0
;; tuple
;; stack=2
DUP
THIRD
;; tuple
;; stack=3
PUSH s1
INDEX 3
PLDU 256
;; return
BLKSWAP 2, 2
BLKDROP 2
; end unpack_address_macro

.macro get_rand_seed_macro
; get_rand_seed_macro
PRINTSTR get_rand_seed
GETPARAM 6
;; return
; end get_rand_seed_macro

.macro get_contract_balance_macro
; get_contract_balance_macro
PRINTSTR get_balance
GETPARAM 7
FIRST
;; return
; end get_contract_balance_macro

.globl	get_bounced_inline
.type	get_bounced_inline, @function
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Function: get_bounced_inline
;; param: msg_cell
PRINTSTR get_src_addr
;; msg_cell
;; stack=1
DUP
CTOS
;; decl: msg_slice
PUSHINT 3
SDSKIPFIRST
PRINTSTR get_src_addr0
LDU 1
SWAP
;; return
NIP
NIP
RET

.globl	checkAndDetachSignature_inline
.type	checkAndDetachSignature_inline, @function
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Function: checkAndDetachSignature_inline
;; param: msg_slice
PRINTSTR checkSign
LDREFRTOS
;; decl: slice
;; if
;; slice
;; stack=2
DUP
SDEMPTY
PUSHCONT {
	PRINTSTR checkSign2
	;; msg_slice
	;; stack=2
	PUSH s1
	;; return
	NIP
	NIP
	RET
}
IFJMP
;; slice
;; stack=2
DUP
PUSHINT 512
SDSKIPFIRST
PLDU 256
;; decl: pubKey
;; msg_slice
;; stack=3
PUSH s2
HASHSU
;; slice
;; stack=4
PUSH s2
;; pubKey
;; stack=5
PUSH s2
CHKSIGNU
THROWIFNOT 40
PRINTSTR checkSign3
;; msg_slice
;; stack=3
PUSH s2
;; return
XCHG s3
BLKDROP 3
RET

.internal-alias :main_internal,        0
.internal	:main_internal
PUSHINT 0 ; selector
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Function: main_internal
;; param: 
;; param: 
;; param: msg_cell
;; param: msg_body_slice
;; param: 
PRINTSTR main_internal
;; msg_cell
;; stack=5
PUSH s2
; get_bounced_inline
;; param: msg_cell
PRINTSTR get_src_addr
;; msg_cell
;; stack=1
DUP
CTOS
;; decl: msg_slice
PUSHINT 3
SDSKIPFIRST
PRINTSTR get_src_addr0
LDU 1
SWAP
;; return
NIP
NIP
; end get_bounced_inline
;; decl: bounced
;; if
;; msg_body_slice
;; stack=6
PUSH s2
SEMPTY
PUSHCONT {
	;; if
	;; bounced
	;; stack=6
	DUP
	EQINT 0
	PUSHCONT {
		PRINTSTR tvm_jump
		;; msg_body_slice
		;; stack=6
		PUSH s2
		PUSHINT $fallback$
		PRINTSTR tvm_jump0
		JMP 1
		;; return
		BLKDROP 6
		RET
	}
	IFJMP
	;; return
	BLKDROP 6
	RET
}
IFJMP
PRINTSTR main_internal1
;; msg_body_slice
;; stack=6
PUSH s2
LDU 32
POP s4
;; decl: func_id
;; if
;; bounced
;; stack=7
PUSH s1
EQINT 1
PUSHCONT {
	PRINTSTR tvm_jump
	;; func_id
	;; stack=7
	DUP
	PUSHINT $onBounce$
	PRINTSTR tvm_jump0
	JMP 1
	;; return
	BLKDROP 7
	RET
}
IFJMP
PRINTSTR tvm_jump
;; msg_body_slice
;; stack=7
PUSH s3
;; func_id
;; stack=8
PUSH s1
PRINTSTR tvm_jump0
JMP 1
BLKDROP 7

.internal-alias :main_external,        -1
.internal	:main_external
PUSHINT -1 ; selector
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Function: main_external
;; param: 
;; param: 
;; param: 
;; param: msg_body_slice
;; param: 
PRINTSTR main_external
;; msg_body_slice
;; stack=5
PUSH s1
PUSHCONT { ; checkAndDetachSignature_inline
	;; param: msg_slice
	PRINTSTR checkSign
	LDREFRTOS
	;; decl: slice
	;; if
	;; slice
	;; stack=2
	DUP
	SDEMPTY
	PUSHCONT {
		PRINTSTR checkSign2
		;; msg_slice
		;; stack=2
		PUSH s1
		;; return
		NIP
		NIP
		RET
	}
	IFJMP
	;; slice
	;; stack=2
	DUP
	PUSHINT 512
	SDSKIPFIRST
	PLDU 256
	;; decl: pubKey
	;; msg_slice
	;; stack=3
	PUSH s2
	HASHSU
	;; slice
	;; stack=4
	PUSH s2
	;; pubKey
	;; stack=5
	PUSH s2
	CHKSIGNU
	THROWIFNOT 40
	PRINTSTR checkSign3
	;; msg_slice
	;; stack=3
	PUSH s2
	;; return
	XCHG s3
	BLKDROP 3
	RET
}
CALLX
;; decl: rest_msg_body_slice
;; rest_msg_body_slice
;; stack=6
DUP
LDU 32
LDU 64
POP s3
;; decl: func_id
;; decl: msg_timestamp
;; if
;; msg_timestamp
;; stack=8
DUP
PUSHCONT { ; replay_prot_inline
	;; param: msg_timestamp
	PRINTSTR replay_prot
	PUSHINT 0
	;; decl: previous_message_timestamp
	PUSHINT 0
	;; decl: interval
	PUSHROOT
	CTOS
	;; decl: c4
	NEWC
	;; decl: c4_builder
	;; c4
	;; stack=5
	PUSH s1
	LDDICT
	POP s3
	SWAP
	STDICT
	;; if
	;; c4
	;; stack=5
	PUSH s1
	PUSHINT 128
	SCHKBITSQ
	PUSHCONT {
		;; c4
		;; stack=5
		PUSH s1
		LDU 64
		LDU 64
		POP s4
		REVERSE 2, 0
		;; assign previous_message_timestamp
		POP s5
		;; assign interval
		POP s3
	}
	PUSHCONT {
		PUSHINT 1800000
		;; assign interval
		POP s3
	}
	IFELSE
	;; if
	;; previous_message_timestamp
	;; stack=5
	PUSH s3
	;; msg_timestamp
	;; stack=6
	PUSH s5
	;; <
	LESS
	;; msg_timestamp
	;; stack=6
	PUSH s5
	NOW
	PUSHINT 1000
	;; *
	MUL
	;; interval
	;; stack=8
	PUSH s5
	;; +
	ADD
	;; <
	LESS
	;; &&
	AND
	PUSHCONT {
		;; msg_timestamp
		;; stack=5
		PUSH s4
		STUR 64
		;; interval
		;; stack=5
		PUSH s2
		STUR 64
		;; c4
		;; stack=5
		PUSH s1
		STSLICER
		;; c4_builder
		;; stack=5
		DUP
		ENDC
		POPROOT
		PRINTSTR replay_prot2
		TRUE
		;; return
		XCHG s5
		BLKDROP 5
		RET
	}
	IFJMP
	PRINTSTR replay_prot3
	FALSE
	;; return
	XCHG s5
	BLKDROP 5
	RET
}
CALLX
PUSHCONT {
	PRINTSTR main_external2
	PRINTSTR tvm_jump
	;; rest_msg_body_slice
	;; stack=8
	PUSH s2
	;; func_id
	;; stack=9
	PUSH s2
	PRINTSTR tvm_jump0
	JMP 1
	PRINTSTR main_external3
	;; return
	BLKDROP 8
	RET
}
IFJMP
PUSHINT 124
THROWANY
BLKDROP 8

.macro push_persistent_data_from_c7_to_c4_macro
; push_persistent_data_from_c7_to_c4_macro
PRINTSTR c7_to_c4
PUSHROOT
CTOS
;; decl: c4
SKIPDICT
NEWC
;; decl: c4_builder
PUSHCTR c7
SECOND
SWAP
STDICT
;; c4
;; stack=2
PUSH s1
STSLICER
;; c4_builder
;; stack=2
DUP
ENDC
POPROOT
PRINTSTR c7_to_c40
BLKDROP 2
; end push_persistent_data_from_c7_to_c4_macro

.globl	replay_prot_inline
.type	replay_prot_inline, @function
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Function: replay_prot_inline
;; param: msg_timestamp
PRINTSTR replay_prot
PUSHINT 0
;; decl: previous_message_timestamp
PUSHINT 0
;; decl: interval
PUSHROOT
CTOS
;; decl: c4
NEWC
;; decl: c4_builder
;; c4
;; stack=5
PUSH s1
LDDICT
POP s3
SWAP
STDICT
;; if
;; c4
;; stack=5
PUSH s1
PUSHINT 128
SCHKBITSQ
PUSHCONT {
	;; c4
	;; stack=5
	PUSH s1
	LDU 64
	LDU 64
	POP s4
	REVERSE 2, 0
	;; assign previous_message_timestamp
	POP s5
	;; assign interval
	POP s3
}
PUSHCONT {
	PUSHINT 1800000
	;; assign interval
	POP s3
}
IFELSE
;; if
;; previous_message_timestamp
;; stack=5
PUSH s3
;; msg_timestamp
;; stack=6
PUSH s5
;; <
LESS
;; msg_timestamp
;; stack=6
PUSH s5
NOW
PUSHINT 1000
;; *
MUL
;; interval
;; stack=8
PUSH s5
;; +
ADD
;; <
LESS
;; &&
AND
PUSHCONT {
	;; msg_timestamp
	;; stack=5
	PUSH s4
	STUR 64
	;; interval
	;; stack=5
	PUSH s2
	STUR 64
	;; c4
	;; stack=5
	PUSH s1
	STSLICER
	;; c4_builder
	;; stack=5
	DUP
	ENDC
	POPROOT
	PRINTSTR replay_prot2
	TRUE
	;; return
	XCHG s5
	BLKDROP 5
	RET
}
IFJMP
PRINTSTR replay_prot3
FALSE
;; return
XCHG s5
BLKDROP 5
RET

.macro my_pubkey_macro
; my_pubkey_macro
PRINTSTR my_pubkey
PUSHROOT
CTOS
;; decl: slice_dict
;; slice_dict
;; stack=1
DUP
LDDICT
POP s2
;; decl: persistentDataDict
PUSHINT 0
;; persistentDataDict
;; stack=3
PUSH s1
PUSHINT 64
DICTUGET
THROWIFNOT 100
;; decl: slice_pubkey
LDU 256
SWAP
;; decl: pubkey
;; slice_pubkey
;; stack=4
PUSH s1
ENDS
NULL
POP s2
PRINTSTR my_pubkey_end
;; pubkey
;; stack=4
DUP
;; return
XCHG s4
BLKDROP 4
; end my_pubkey_macro

.macro generateConstructorProtection_macro
; generateConstructorProtection_macro
PRINTSTR constr_prot_0
PUSHINT 0
;; decl: dict
PUSHINT 0
;; decl: previous_message_timestamp
PUSHINT 1800000
;; decl: interval
PUSHROOT
CTOS
;; decl: c4
;; c4
;; stack=4
DUP
LDDICT
POP s2
;; assign dict
POP s4
;; if
;; c4
;; stack=4
DUP
PUSHINT 128
SCHKBITSQ
PUSHCONT {
	LDU 64
	SWAP
	;; assign previous_message_timestamp
	POP s3
	LDU 64
	SWAP
	;; assign interval
	POP s2
	;; if
	;; c4
	;; stack=4
	DUP
	PUSHINT 1
	SCHKBITSQ
	PUSHCONT {
		PUSHINT 123
		THROWANY
	}
	IF
}
IF
NEWC
;; decl: c4_builder
;; dict
;; stack=5
PUSH s4
SWAP
STDICT
;; previous_message_timestamp
;; stack=5
PUSH s3
STUR 64
;; interval
;; stack=5
PUSH s2
STUR 64
PUSHINT 1
STONES
;; c4
;; stack=5
PUSH s1
STSLICER
;; c4_builder
;; stack=5
DUP
ENDC
POPROOT
PRINTSTR constr_prot_1
BLKDROP 5
; end generateConstructorProtection_macro

.macro convertAddressToStd_macro
; convertAddressToStd_macro
;; param: _address
;; if
;; _address
;; stack=1
DUP
PLDU 2
NEQINT 2
PUSHCONT {
	;; _address
	;; stack=1
	DUP
	PARSEMSGADDR
	;; decl: tuple
	;; if
	;; tuple
	;; stack=2
	DUP
	FIRST
	EQINT 3
	PUSHCONT {
		NEWC
		;; decl: builder
		PUSHINT 4
		STUR 3
		;; tuple
		;; stack=3
		PUSH s1
		THIRD
		STIR 8
		;; tuple
		;; stack=3
		PUSH s1
		INDEX 3
		;; decl: addr
		;; builder
		;; stack=4
		PUSH s1
		PUSHINT 256
		;; addr
		;; stack=6
		PUSH s2
		SBITS ; tvm_sbits
		;; -
		SUB
		STZEROES
		POP s2
		;; addr
		;; stack=4
		DUP
		;; builder
		;; stack=5
		PUSH s2
		STSLICE
		POP s2
		;; builder
		;; stack=4
		PUSH s1
		ENDC
		CTOS
		;; assign _address
		POP s4
		;; drop locals
		BLKDROP 2
	}
	PUSHCONT {
		FALSE
		THROWIFNOT 100
	}
	IFELSE
	;; drop locals
	DROP
}
IF
;; _address
;; stack=1
DUP
;; return
NIP
; end convertAddressToStd_macro

.macro sender_address_macro
; sender_address_macro
PRINTSTR msg_sender
PUSHINT 0
;; decl: sender_address
DEPTH
PUSHINT 5
SUB
PICK
;; decl: trans_id
;; if
;; trans_id
;; stack=2
DUP
EQINT 0
PUSHCONT {
	DEPTH
	PUSHINT 3
	SUB
	PICK
	CTOS
	;; decl: msg_slice
	PUSHINT 4
	SDSKIPFIRST
	;; msg_slice
	;; stack=3
	DUP
	LDMSGADDR
	POP s2
	;; assign sender_address
	POP s3
	;; drop locals
	DROP
}
PUSHCONT {
	;; if
	;; trans_id
	;; stack=2
	DUP
	PUSHINT -1
	;; ==
	EQUAL
	PUSHCONT {
		NEWC
		;; decl: builder
		PUSHINT 1
		STONES
		PUSHINT 266
		STZEROES
		;; builder
		;; stack=3
		DUP
		ENDC
		CTOS
		;; assign sender_address
		POP s3
		;; drop locals
		DROP
	}
	PUSHCONT {
		FALSE
		THROWIFNOT 100
	}
	IFELSE
}
IFELSE
PRINTSTR msg_sender0
;; sender_address
;; stack=2
PUSH s1
;; return
NIP
NIP
; end sender_address_macro

.macro sender_pubkey_macro
; sender_pubkey_macro
PRINTSTR sender_pk
DEPTH
PUSHINT 5
SUB
PICK
;; decl: trans_id
PUSHINT 0
;; decl: pubkey
;; if
;; trans_id
;; stack=2
PUSH s1
PUSHINT -1
;; ==
EQUAL
PUSHCONT {
	DEPTH
	PUSHINT 4
	SUB
	PICK
	;; decl: msg_slice
	LDREFRTOS
	;; decl: slice
	;; if
	;; !
	;; slice
	;; stack=4
	DUP
	SDEMPTY
	NOT
	PUSHCONT {
		;; slice
		;; stack=4
		DUP
		PUSHINT 512
		SDSKIPFIRST
		PLDU 256
		;; assign pubkey
		POP s3
	}
	IF
	;; drop locals
	BLKDROP 2
}
IF
PRINTSTR sender_pk3
;; pubkey
;; stack=2
DUP
;; return
NIP
NIP
; end sender_pubkey_macro

.macro message_balance_macro
; message_balance_macro
DEPTH
PUSHINT 5
SUB
PICK
;; decl: trans_id
;; if
;; trans_id
;; stack=1
DUP
PUSHINT -1
;; !=
NEQ
;; trans_id
;; stack=2
PUSH s1
NEQINT 0
;; &&
AND
PUSHCONT {
	FALSE
	THROWIFNOT 100
}
IF
DEPTH
PUSHINT 2
SUB
PICK
;; return
NIP
; end message_balance_macro

.globl	address2uint
.type	address2uint, @function
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Function: address2uint
;; param: slice
;; slice
;; stack=1
DUP
PARSEMSGADDR
INDEX 3
PLDU 256
;; return
NIP
RET

